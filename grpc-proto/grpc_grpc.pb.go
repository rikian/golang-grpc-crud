// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: grpc-proto/grpc.proto

package grpc_crud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCrudClient is the client API for UserCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCrudClient interface {
	CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *GetAllUsers, opts ...grpc.CallOption) (*UserList, error)
	GetUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *NewDataUser, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Status, error)
}

type userCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCrudClient(cc grpc.ClientConnInterface) UserCrudClient {
	return &userCrudClient{cc}
}

func (c *userCrudClient) CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc_proto.UserCrud/CreateNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetUsers(ctx context.Context, in *GetAllUsers, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/grpc_proto.UserCrud/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc_proto.UserCrud/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) UpdateUser(ctx context.Context, in *NewDataUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc_proto.UserCrud/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) DeleteUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/grpc_proto.UserCrud/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCrudServer is the server API for UserCrud service.
// All implementations must embed UnimplementedUserCrudServer
// for forward compatibility
type UserCrudServer interface {
	CreateNewUser(context.Context, *NewUser) (*User, error)
	GetUsers(context.Context, *GetAllUsers) (*UserList, error)
	GetUser(context.Context, *NewUser) (*User, error)
	UpdateUser(context.Context, *NewDataUser) (*User, error)
	DeleteUser(context.Context, *NewUser) (*Status, error)
	mustEmbedUnimplementedUserCrudServer()
}

// UnimplementedUserCrudServer must be embedded to have forward compatible implementations.
type UnimplementedUserCrudServer struct {
}

func (UnimplementedUserCrudServer) CreateNewUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewUser not implemented")
}
func (UnimplementedUserCrudServer) GetUsers(context.Context, *GetAllUsers) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserCrudServer) GetUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserCrudServer) UpdateUser(context.Context, *NewDataUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserCrudServer) DeleteUser(context.Context, *NewUser) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserCrudServer) mustEmbedUnimplementedUserCrudServer() {}

// UnsafeUserCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCrudServer will
// result in compilation errors.
type UnsafeUserCrudServer interface {
	mustEmbedUnimplementedUserCrudServer()
}

func RegisterUserCrudServer(s grpc.ServiceRegistrar, srv UserCrudServer) {
	s.RegisterService(&UserCrud_ServiceDesc, srv)
}

func _UserCrud_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto.UserCrud/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).CreateNewUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto.UserCrud/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetUsers(ctx, req.(*GetAllUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto.UserCrud/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDataUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto.UserCrud/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).UpdateUser(ctx, req.(*NewDataUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto.UserCrud/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).DeleteUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCrud_ServiceDesc is the grpc.ServiceDesc for UserCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_proto.UserCrud",
	HandlerType: (*UserCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewUser",
			Handler:    _UserCrud_CreateNewUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserCrud_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserCrud_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserCrud_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserCrud_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-proto/grpc.proto",
}
